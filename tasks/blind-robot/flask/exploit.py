#!/usr/bin/python3

import json
import asyncio
import aiohttp

from PIL import Image
from argparse import ArgumentParser


FLAG_LENGTH = 58
SYMBOL_WIDTH = 15
SYMBOL_HEIGHT = 27


def get_offset(direction):
    return {
        'west':      (-1,  0), 
        'northwest': (-1, -1), 
        'north':     ( 0, -1), 
        'northeast': ( 1, -1),
        'east':      ( 1,  0),
        'southeast': ( 1,  1),
        'south':     ( 0,  1),
        'southwest': (-1,  1)
    }[direction]


def make_image(responses):
    image = Image.new('1', (SYMBOL_WIDTH * FLAG_LENGTH, SYMBOL_HEIGHT))
    for data in responses:
        if not data:
            continue
        level, x, y, info = data
        image.putpixel((level * SYMBOL_WIDTH + x, y), int(info.get('type') == 'empty'))
        for direction, can_move in info.get('moves').items():
            dx, dy = get_offset(direction)
            image.putpixel((level * SYMBOL_WIDTH + x + dx, y + dy), int(can_move))

    image.show()


async def resolve_symbol(url, session, level, x, y):
    async with session.post(url, json={'level': level, 'x': x, 'y': y}) as response:
        data = await response.read()
        info = json.loads(data.decode())
        if info.get('message'):
            return None
        print('downloaded part (%2d, %2d) of symbol %2d' % (x, y, level))
        return level, x, y, info


async def download_flag(url):
    tasks = []
    async with aiohttp.ClientSession() as session:
        for level in range(FLAG_LENGTH):
            for x in range(1, SYMBOL_WIDTH, 3):
                for y in range(1, SYMBOL_HEIGHT, 3):
                    task = asyncio.ensure_future(resolve_symbol(url, session, level, x, y))
                    tasks.append(task)

        responses = await asyncio.gather(*tasks)
        make_image(responses)


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument('--url', help='task url (without token)', required=True)
    parser.add_argument('--token', help='your team token', required=True)
    args = parser.parse_args()

    url = '%s/%s/resolve/' % (args.url, args.token)
    loop = asyncio.get_event_loop()
    loop.run_until_complete(download_flag(url))
