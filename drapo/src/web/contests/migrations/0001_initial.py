# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-06-05 18:28
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import djchoices.choices


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('teams', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AbstractAdditionalScorer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AbstractParticipant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AbstractTasksOpeningPolicy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text='Contest name')),
                ('is_visible_in_list', models.BooleanField(default=False)),
                ('registration_type', models.CharField(choices=[('Open', 'Open'), ('Moderated', 'Moderated'), ('Closed', 'Closed')], max_length=20, validators=[djchoices.choices.ChoicesValidator({'Closed': 'Closed', 'Moderated': 'Moderated', 'Open': 'Open'})])),
                ('participation_mode', models.CharField(choices=[('Individual', 'Individual'), ('Team', 'Team')], max_length=20, validators=[djchoices.choices.ChoicesValidator({'Individual': 'Individual', 'Team': 'Team'})])),
                ('start_time', models.DateTimeField(help_text='Contest start time')),
                ('finish_time', models.DateTimeField(help_text='Contest finish time')),
                ('registration_start_time', models.DateTimeField(blank=True, help_text='Contest registration start time, only for open and moderated registrations')),
                ('registration_finish_time', models.DateTimeField(blank=True, help_text='Contest registration finish time, only for open and moderated registration')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ByCategoriesTasksOpeningPolicy',
            fields=[
                ('abstracttasksopeningpolicy_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='contests.AbstractTasksOpeningPolicy')),
                ('opens_for_all_participants', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('contests.abstracttasksopeningpolicy',),
        ),
        migrations.CreateModel(
            name='IndividualParticipant',
            fields=[
                ('abstractparticipant_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='contests.AbstractParticipant')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='individual_participant_in', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=('contests.abstractparticipant',),
        ),
        migrations.CreateModel(
            name='ScoreByPlaceAdditionalScorer',
            fields=[
                ('abstractadditionalscorer_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='contests.AbstractAdditionalScorer')),
                ('place', models.PositiveIntegerField(help_text='I.e. 1 for team who first solved the task')),
                ('points', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
            bases=('contests.abstractadditionalscorer',),
        ),
        migrations.CreateModel(
            name='TaskBasedContest',
            fields=[
                ('contest_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='contests.Contest')),
                ('tasks_grouping', models.CharField(choices=[('ByCategories', 'ByCategories'), ('OneByOne', 'OneByOne')], max_length=20, validators=[djchoices.choices.ChoicesValidator({'ByCategories': 'ByCategories', 'OneByOne': 'OneByOne'})])),
            ],
            options={
                'abstract': False,
            },
            bases=('contests.contest',),
        ),
        migrations.CreateModel(
            name='TeamParticipant',
            fields=[
                ('abstractparticipant_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='contests.AbstractParticipant')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participant_in', to='teams.Team')),
            ],
            options={
                'abstract': False,
            },
            bases=('contests.abstractparticipant',),
        ),
        migrations.AddField(
            model_name='contest',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_contests.contest_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='abstracttasksopeningpolicy',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_contests.abstracttasksopeningpolicy_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='abstractparticipant',
            name='contest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='contests.Contest'),
        ),
        migrations.AddField(
            model_name='abstractparticipant',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_contests.abstractparticipant_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='abstractadditionalscorer',
            name='contest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additional_scorers', to='contests.Contest'),
        ),
        migrations.AddField(
            model_name='abstractadditionalscorer',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_contests.abstractadditionalscorer_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='abstracttasksopeningpolicy',
            name='contest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks_opening_policies', to='contests.TaskBasedContest'),
        ),
    ]
